// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NVIndoorKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreGraphics
import CoreLocation
import CoreML
import CoreMotion
import Foundation
import NVDirectionKit
@_exported import NVIndoorKit
import SSZipArchive
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum IndoorPlaceStatus {
  case notDownloaded, downloaded, updateAvailable
  public static func == (a: NVIndoorKit.IndoorPlaceStatus, b: NVIndoorKit.IndoorPlaceStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class IndoorPlace {
  public var id: Swift.String
  public var name: Swift.String
  public var position: CoreLocation.CLLocationCoordinate2D
  public func getMap() -> NVIndoorKit.IndoorMap?
  public func getBeacons() -> [NVIndoorKit.Beacon]
  @objc deinit
}
public protocol NVIndoorTransitionServiceDelegate : AnyObject {
  func indoorTransitionService(_ service: NVIndoorKit.NVIndoorTransitionService, onDiscover place: Swift.String)
  func indoorTransitionService(_ service: NVIndoorKit.NVIndoorTransitionService, onEnter place: Swift.String, at location: NVDirectionKit.NVibeIndoorLocation)
  func indoorTransitionService(_ service: NVIndoorKit.NVIndoorTransitionService, onExit place: Swift.String, at location: NVDirectionKit.NVibeLocation)
}
@objc open class NVIndoorTransitionService : ObjectiveC.NSObject {
  public init(delegate: (any NVIndoorKit.NVIndoorTransitionServiceDelegate)? = nil)
  public func startUpdateTransition(for step: NVDirectionKit.NVibeMultimodalStep, state: NVIndoorKit.ZoneState)
  public func stopUpdateTransition()
  public func isUpdateTransitionRunning() -> Swift.Bool
  @objc deinit
}
open class NVibeIndoorStep {
  public var geometry: [CoreLocation.CLLocationCoordinate2D]
  public var distance: Swift.Double
  public var maneuver: NVIndoorKit.NVibeIndoorManeuver
  public init(lastLocation: CoreLocation.CLLocationCoordinate2D? = nil, geometry: [CoreLocation.CLLocationCoordinate2D], floorInstruction: Swift.Int, type: NVIndoorKit.NVibeIndoorType, modifier: NVIndoorKit.NVibeIndoorModifier, instruction: Swift.String)
  @objc deinit
}
public enum NVibeIndoorType {
  case arrive, depart, turnstile, portico, door, stairUp, stairDown, elevatorEnter, elevatorExit, elevatorUp, elevatorDown, `continue`, turn
  public static func == (a: NVIndoorKit.NVibeIndoorType, b: NVIndoorKit.NVibeIndoorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class GridLine {
  public func getEdge() -> [CoreLocation.CLLocationCoordinate2D]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Particle {
  @objc deinit
}
public class Zone : Swift.Equatable {
  public init(path: [CoreLocation.CLLocationCoordinate2D], exclude: Swift.Bool = false)
  public func getCoordinatePath() -> [CoreLocation.CLLocationCoordinate2D]
  public func getPointPath() -> [CoreFoundation.CGPoint]
  public func isExclude() -> Swift.Bool
  public static func == (lhs: NVIndoorKit.Zone, rhs: NVIndoorKit.Zone) -> Swift.Bool
  @objc deinit
}
public class TransitionZone {
  public init(firstZone: (floor: Swift.Int, zone: NVIndoorKit.Zone), lastZone: (floor: Swift.Int, zone: NVIndoorKit.Zone))
  @objc deinit
}
public class Stair {
  public init(path: [CoreLocation.CLLocationCoordinate2D], speed: Swift.Double)
  public func getCoordinatePath() -> [CoreLocation.CLLocationCoordinate2D]
  public func getPointPath() -> [CoreFoundation.CGPoint]
  @objc deinit
}
public protocol NVIndoorLocationServiceDelegate : AnyObject {
  func onForceUpdateLocation() -> (location: NVDirectionKit.NVibeIndoorLocation?, heading: Swift.Double?)
  func onLocationChanged(location: NVDirectionKit.NVibeIndoorLocation)
  func onHeadingChanged(heading: Swift.Double)
  func onLocationNotFound()
}
public protocol IndoorLocationDebugDelegate : AnyObject {
  func onParticleChanged(particles: [CoreLocation.CLLocationCoordinate2D])
  func onClusterChanged(cluster: Swift.Int)
}
public protocol LocationService : AnyObject {
  func startUpdateLocation(location: NVDirectionKit.NVibeIndoorLocation?, id: Swift.String, completion: @escaping () -> Swift.Void)
  func stopUpdateLocation()
}
@objc open class NVIndoorLocationService : ObjectiveC.NSObject, NVIndoorKit.LocationService {
  weak public var delegate: (any NVIndoorKit.NVIndoorLocationServiceDelegate)?
  weak public var debugDelegate: (any NVIndoorKit.IndoorLocationDebugDelegate)?
  public init(delegate: (any NVIndoorKit.NVIndoorLocationServiceDelegate)? = nil)
  public func startUpdateLocation(location: NVDirectionKit.NVibeIndoorLocation? = nil, id: Swift.String, completion: @escaping () -> Swift.Void)
  public func stopUpdateLocation()
  public func restartUpdateLocation(completion: @escaping () -> Swift.Void)
  public func pauseUpdateLocation()
  public func unpauseUpdateLocation()
  public func forceNewLocation(location: NVDirectionKit.NVibeIndoorLocation)
  public func forceNewCoordinate(coordinate: CoreLocation.CLLocationCoordinate2D)
  public func moveToLocation(location: NVDirectionKit.NVibeIndoorLocation, id: Swift.String? = nil)
  public func getLastLocation() -> NVDirectionKit.NVibeIndoorLocation?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Beacon {
  public var position: CoreLocation.CLLocationCoordinate2D
  @objc deinit
}
public protocol NVIndoorNavigationServiceDelegate : AnyObject {
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, didStartWith progress: NVIndoorKit.NVibeIndoorRouteProgress)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, didUpdate progress: NVIndoorKit.NVibeIndoorRouteProgress, with rawLocation: NVDirectionKit.NVibeIndoorLocation, snappedTo location: NVDirectionKit.NVibeIndoorLocation, with uTurn: Swift.Bool)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, didStopWith progress: NVIndoorKit.NVibeIndoorRouteProgress)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, didRerouteAlong route: NVIndoorKit.NVibeIndoorRoute, with uTurn: Swift.Bool)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, didChange progress: NVIndoorKit.NVibeIndoorRouteProgress)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, didUpdateRightDirectionWith progress: NVIndoorKit.NVibeIndoorRouteProgress)
}
public protocol NVIndoorNavigationLocationServiceDelegate : AnyObject {
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService) -> (location: NVDirectionKit.NVibeIndoorLocation?, heading: Swift.Double?)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, onLocationChanged: NVDirectionKit.NVibeIndoorLocation?)
  func indoorNavigationService(_ service: NVIndoorKit.NVIndoorNavigationService, onDirectionChanged: CoreLocation.CLLocationDirection)
}
@objc open class NVIndoorNavigationService : ObjectiveC.NSObject {
  public var indoorLocationService: NVIndoorKit.NVIndoorLocationService?
  public var stopUpdateLocationWhenNavigationIsFinished: Swift.Bool
  public var distanceBeforeRerouting: Swift.Double
  public init(delegate: (any NVIndoorKit.NVIndoorNavigationServiceDelegate)? = nil, locationDelegate: (any NVIndoorKit.NVIndoorNavigationLocationServiceDelegate)? = nil)
  public func startNavigation(route: NVIndoorKit.NVibeIndoorRoute, completion: @escaping () -> Swift.Void)
  public func stopNavigation()
  public func getCurrentLocationData() -> (lastLocation: NVDirectionKit.NVibeIndoorLocation?, compassHeading: CoreLocation.CLLocationDirection?)
  @objc deinit
}
extension NVIndoorKit.NVIndoorNavigationService : NVIndoorKit.NVIndoorLocationServiceDelegate {
  public func onForceUpdateLocation() -> (location: NVDirectionKit.NVibeIndoorLocation?, heading: Swift.Double?)
  public func onLocationChanged(location: NVDirectionKit.NVibeIndoorLocation)
  public func onHeadingChanged(heading: Swift.Double)
  public func onLocationNotFound()
}
@objc open class NVibeIndoorRouteProgress : ObjectiveC.NSObject {
  public var remainingDistance: Swift.Double
  public var remainingDuration: Swift.Double
  public var stepProgress: NVIndoorKit.NVibeIndoorStepProgress
  public init(remainingDistance: Swift.Double, remainingDuration: Swift.Double, stepProgress: NVIndoorKit.NVibeIndoorStepProgress)
  @objc deinit
}
@objc open class NVibeIndoorStepProgress : ObjectiveC.NSObject {
  public var remainingDistance: Swift.Double
  public var remainingDuration: Swift.Double
  public var direction: CoreLocation.CLLocationDirection?
  public var currentStep: NVIndoorKit.NVibeIndoorStep
  public var nextStep: NVIndoorKit.NVibeIndoorStep?
  public init(remainingDistance: Swift.Double, remainingDuration: Swift.Double, direction: CoreLocation.CLLocationDirection?, currentStep: NVIndoorKit.NVibeIndoorStep, nextStep: NVIndoorKit.NVibeIndoorStep?)
  @objc deinit
}
open class NVibeIndoorRouteOptions {
  public var language: Swift.String
  public init(language: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NVIndoorPoi {
  public var name: Swift.String
  public var description: Swift.String
  public var position: CoreLocation.CLLocationCoordinate2D
  public var access: CoreLocation.CLLocationCoordinate2D
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NVIndoorTransitPlatformPoi : NVIndoorKit.NVIndoorPoi {
  public var type: NVDirectionKit.NVibeTransitInformation.Mode
  public var line: Swift.String
  public var direction: Swift.String
  public var platform: NVIndoorKit.NVIndoorTransitPlatform
  @objc deinit
}
public enum NVIndoorTransitPlatform : Swift.String {
  case head
  case middle
  case queue
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class NVIndoorStationExitPoi : NVIndoorKit.NVIndoorPoi {
  public var nearestTransitPlatform: [NVIndoorKit.NVIndoorTransitPlatformPoi]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NVIndoorPlace : ObjectiveC.NSObject {
  public static let shared: NVIndoorKit.NVIndoorPlace
  public func downloadAvailablePlace(completion: @escaping () -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadSpecificPlaces(ids: [Swift.String]) async throws
  #endif
  public func getAvailablePlace() -> [NVIndoorKit.IndoorPlace]
  @objc override dynamic public init()
  @objc deinit
}
extension NVDirectionKit.NVibeMultimodalRoute {
  public func isIndoorMapNeeded() -> Swift.Bool
  public func getIndoorMapStatus() -> [(id: Swift.String, status: NVIndoorKit.IndoorPlaceStatus)]
  public func updateIndoor(codeZone: Swift.String? = nil, departureLocation: NVDirectionKit.NVibeLocation? = nil, plusCode: Swift.String? = nil)
}
extension Swift.Array where Element : NVDirectionKit.NVibeMultimodalRoute {
  public mutating func updateIndoor(codeZone: Swift.String? = nil, departureLocation: NVDirectionKit.NVibeLocation? = nil, plusCode: Swift.String? = nil)
}
public class Cluster {
  public init(path: [CoreLocation.CLLocationCoordinate2D], index: Swift.Int, color: UIKit.UIColor, isEnable: Swift.Bool = true)
  public func getCoordinatePath() -> [CoreLocation.CLLocationCoordinate2D]
  public func getPointPath() -> [CoreFoundation.CGPoint]
  public func getIndex() -> Swift.Int
  public func getColor() -> UIKit.UIColor
  @objc deinit
}
public class Wall {
  public init(a: CoreLocation.CLLocationCoordinate2D, b: CoreLocation.CLLocationCoordinate2D)
  public func getCoordinatePath() -> [CoreLocation.CLLocationCoordinate2D]
  public func getPointPath() -> [CoreFoundation.CGPoint]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndoorMap {
  public var floors: [Swift.Int]
  public var zones: [Swift.Int : [NVIndoorKit.Zone]]
  public var walls: [Swift.Int : [NVIndoorKit.Wall]]
  public var clusters: [Swift.Int : [NVIndoorKit.Cluster]]
  public var stairs: [Swift.Int : [NVIndoorKit.Stair]]
  public var elevators: [NVIndoorKit.Wall]
  public var transitionZones: [Swift.Int : [NVIndoorKit.TransitionZone]]
  public var pois: [Swift.Int : [NVIndoorKit.NVIndoorPoi]]
  public var gridLines: [Swift.Int : [NVIndoorKit.GridLine]]
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NVibeIndoorManeuver {
  public var bearingBefore: Swift.Double?
  public var bearingAfter: Swift.Double?
  public var type: NVIndoorKit.NVibeIndoorType
  public var modifier: NVIndoorKit.NVibeIndoorModifier?
  public var location: CoreLocation.CLLocationCoordinate2D
  public var instruction: Swift.String
  public var floorInstruction: Swift.Int
  public var turnDirection: Swift.Int?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NVIndoorDirection : ObjectiveC.NSObject {
  public static let shared: NVIndoorKit.NVIndoorDirection
  public func getIndoorPoi(from place: NVIndoorKit.IndoorPlace) -> [Swift.Int : [NVIndoorKit.NVIndoorPoi]]
  public func getRoute(from step: NVDirectionKit.NVibeMultimodalStep, language: Swift.String = "en") -> NVIndoorKit.NVibeIndoorRoute?
  public func getRoute(from departure: NVDirectionKit.NVibeIndoorLocation, to destination: NVIndoorKit.NVIndoorPoi, in place: NVIndoorKit.IndoorPlace, language: Swift.String = "en") -> NVIndoorKit.NVibeIndoorRoute?
  @objc override dynamic public init()
  @objc deinit
}
public enum NVibeIndoorModifier {
  case left, right, straight, uTurn
  public static func == (a: NVIndoorKit.NVibeIndoorModifier, b: NVIndoorKit.NVibeIndoorModifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ZoneState : Swift.String {
  case IN
  case OUT
  case UNKNOW
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class NVibeIndoorRoute {
  public var id: Swift.String
  public var startLocation: NVDirectionKit.NVibeIndoorLocation
  public var endLocation: NVDirectionKit.NVibeIndoorLocation
  public var steps: [NVIndoorKit.NVibeIndoorStep]
  public var options: NVIndoorKit.NVibeIndoorRouteOptions
  public func getGeometry() -> [CoreLocation.CLLocationCoordinate2D]
  public func getDistance() -> Swift.Double
  public func getDuration() -> Swift.Double
  @objc deinit
}
extension NVIndoorKit.IndoorPlaceStatus : Swift.Equatable {}
extension NVIndoorKit.IndoorPlaceStatus : Swift.Hashable {}
extension NVIndoorKit.NVibeIndoorType : Swift.Equatable {}
extension NVIndoorKit.NVibeIndoorType : Swift.Hashable {}
extension NVIndoorKit.NVIndoorTransitPlatform : Swift.Equatable {}
extension NVIndoorKit.NVIndoorTransitPlatform : Swift.Hashable {}
extension NVIndoorKit.NVIndoorTransitPlatform : Swift.RawRepresentable {}
extension NVIndoorKit.NVibeIndoorModifier : Swift.Equatable {}
extension NVIndoorKit.NVibeIndoorModifier : Swift.Hashable {}
extension NVIndoorKit.ZoneState : Swift.Equatable {}
extension NVIndoorKit.ZoneState : Swift.Hashable {}
extension NVIndoorKit.ZoneState : Swift.RawRepresentable {}
